Description:
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution:

Use binary search:
  1. Set low index as 0, high index as len-1
  2. While low index < high index:
    a. mid = (low+high)/2
    b. if Target == array[mid index], target index = mid index, 
        high index = mid index - 1 (if search for first appearance), OR
        low index = mid index + 1 (if search for last appearance)
    c. else if target < array[mid index], high index = mid index - 1
    d. else (target > array[mid index]), low index = mid index + 1

Fun fact: Brute force does just as well in many cases due to the test cases chosen and due to the fact that binary search has the average case of O(log n) and worst case of O(n).